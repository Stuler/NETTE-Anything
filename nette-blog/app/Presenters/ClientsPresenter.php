<?php
declare(strict_types=1);

namespace App\Presenters;

//use App\Components\FileSystem\FileSystem;
//use App\Components\FileSystem\FileSystemFactory;
use App\Components\ClientList\ClientList;
use App\Components\ClientList\ClientListFactory;
use App\Models\ProcessManagers\ClientsProcessManager;
use App\Models\Repository\ClientsRepository;
use Nette;
use Nette\Application\UI\Form;
use App\Components\ClientDetail\ClientDetail;
use App\Components\ClientDetail\ClientDetailFactory;
use App\Components\CustomList\CustomList;
use App\Components\CustomList\CustomListFactory;

// TODO: upravit spravanie suborov a zloziek
// TODO: modalne okno - pridat klienta


final class ClientsPresenter extends Nette\Application\UI\Presenter
{
    /** @var ClientsProcessManager @inject @internal */
    public $clientsPM;

    /** @var ClientsRepository @inject @internal */
    public $clientsRepo;

//    /** @var FileSystemFactory @inject @internal */
//    public $fileSystemFactory;

    /** @var ClientListFactory @inject @internal */
    public $clientListFactory;

    /** @var ClientDetailFactory @inject @internal */
    public $clientDetailFactory;

    /** @var CustomListFactory @inject @internal*/
    public $customListFactory;

    protected function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
    }

    protected function beforeRender()
    {
        $this->template->absoluteUrl = "C:\WWW\NETTE-Anything\nette-blog\www\bundle";
    }

//    public function renderDefault()
//    {
//        $searchTerm = $this->getParameter("term");
//        if ($searchTerm) {
//            $this->template->clients = $this->clientsRepo->fetchAllActiveBySearchTerm($searchTerm);
//        } else {
//            $this->template->clients = $this->clientsRepo->fetchAllActive();
//        }
//    }

    /*
    * Funkcia vyrenderuje edit formular;
    * Ak je vyplnene ID, umozni pridat kontaktnu osobu
    *
    */
    /*public function renderEdit(?int $id)
    {
        if ($id) {
            $client = $this->clientsRepo->fetchById($id);
            $this['clientForm']->setDefaults($client);

            $client_person = $this->clientsRepo->fetchContactById($id);
            $this->template->contacts = $client_person;

        }
        $this->template->isEdit = $id != null;
    }*/

    public function createComponentClientDetail(): ClientDetail
    {
        $clientDetail = $this->clientDetailFactory->create();

        // volam udalost onChange
        $clientDetail->onChange[] = function () {
            $this['clientList']->redrawControl();
        };
        return $clientDetail;
    }

// TODO: napisat univerzalnu komponentu pre zoznam klientov a kontaktov
    public function createComponentClientList(): ClientList
    {
        $clientList = $this->clientListFactory->create();
//        $customList->table = "client";
//        $customList->columns = ["id", "name", "phone"]; akchcem zobrazit nejake konkretne stlpce
//        $customList->table = "client_person";
//        $customList->relationColumn = "client_id";
//        $customList->relationValue = 3;

        $clientList->onClick[] = function ($id) {
            $this["clientDetail"]->id = $id; //posielam perzistentny parameter do clientDetail
            $this->template->showModal = true;
            $this->redrawControl("modal");
        };
        return $clientList;
    }

    public function createComponentCustomList(): CustomList
    {
        $customList = $this->customListFactory->create(); // ekvivalent "new" - aby fungovalo inject
        $customList->setTable("client");
        $customList->setColumns(["name","email"]);
        return $customList;
    }

    /*    public function createComponentFileSystem(): FileSystem
        {
            $fileSystem = $this->fileSystemFactory->create();
            $fileSystem->clientId = $this->getParameter("id");
            return $fileSystem;
        }*/

    /*
     * Funkcia na vykreslenie a upravu kontaktov klienta
     * contactId ma doniest id klienta a vypisat potrebne udaje
     */
    /*    public function handleEditPerson(int $contactId)
        {
            $values = $this->clientsRepo->fetchContact($contactId);
            $this['personForm']->setDefaults($values);
            $this->redrawControl("contactForm");
        }*/

    /*    public function handleDeleteContact(int $contactId)
        {
            $this->clientsPM->removeContact($contactId);
            $this->redrawControl("contactList");
        }*/

    public function handleShowModal()
    {
        $this->template->showModal = true;
        $this->redrawControl("modal");
    }

    public function handleCloseModal()
    {
        $this->redrawControl("modal");
    }

}
