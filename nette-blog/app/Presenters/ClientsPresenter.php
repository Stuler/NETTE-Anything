<?php
declare(strict_types=1);

namespace App\Presenters;

//use App\Components\FileSystem\FileSystem;
//use App\Components\FileSystem\FileSystemFactory;
use App\Components\ClientList\ClientList;
use App\Components\ClientList\ClientListFactory;
use App\Models\ProcessManagers\ClientsProcessManager;
use App\Models\Repository\ClientsRepository;
use Nette;
use Nette\Application\UI\Form;
use App\Components\ClientDetail\ClientDetail;
use App\Components\ClientDetail\ClientDetailFactory;
use App\Components\CustomList\CustomList;
use App\Components\CustomList\CustomListFactory;
use Nette\Database\Explorer;
use Nette\Database\Table\ActiveRow;
use Nette\Database\Table\Selection;

// TODO: upravit spravanie suborov a zloziek
// TODO: modalne okno - pridat klienta


final class ClientsPresenter extends Nette\Application\UI\Presenter
{
    /** @var ClientsProcessManager @inject @internal */
    public $clientsPM;

    /** @var ClientsRepository @inject @internal */
    public $clientsRepo;

//    /** @var FileSystemFactory @inject @internal */
//    public $fileSystemFactory;

    /** @var ClientListFactory @inject @internal */
    public $clientListFactory;

    /** @var ClientDetailFactory @inject @internal */
    public $clientDetailFactory;

    /** @var CustomListFactory @inject @internal */
    public $customListFactory;

    /** @var Explorer @inject @internal */
    public $db;

    protected function startup()
    {
        parent::startup(); // TODO: Change the autogenerated stub
    }

    protected function beforeRender()
    {
        $this->template->absoluteUrl = "C:\WWW\NETTE-Anything\nette-blog\www\bundle";
    }

//    public function renderDefault()
//    {
//        $searchTerm = $this->getParameter("term");
//        if ($searchTerm) {
//            $this->template->clients = $this->clientsRepo->fetchAllActiveBySearchTerm($searchTerm);
//        } else {
//            $this->template->clients = $this->clientsRepo->fetchAllActive();
//        }
//    }

    /*
    * Funkcia vyrenderuje edit formular;
    * Ak je vyplnene ID, umozni pridat kontaktnu osobu
    *
    */
    /*public function renderEdit(?int $id)
    {
        if ($id) {
            $client = $this->clientsRepo->fetchById($id);
            $this['clientForm']->setDefaults($client);

            $client_person = $this->clientsRepo->fetchContactById($id);
            $this->template->contacts = $client_person;

        }
        $this->template->isEdit = $id != null;
    }*/

    public function renderTest(?int $id)
    {

//        $clients = $this->clientsRepo->getAll();
//        $this->template->contacts = $clients;

/*        $oneClient = $this->clientsRepo->getOne((int) $id=50);
        $this->template->oneContact = $oneClient;*/

//        $contacts = $this->clientsRepo->getAllContacts();
//        $this->template->clientsContacts = $contacts;

//        $clients = $this->db->table('client')->where('name=? OR email=?', 'Moravia Cans','peter.jurek@gmail.com'  );
//        $clients = $this->db->table('client')->select('id, name, ico, email');
//        $contacts = $this->db->table('client_person');
//        $contacts->group('client_person.client.');
//        $clients->having('ico');
        $clients = $this->db->table('client');
        // ->where(":client_person.name LIKE ?", "%Rastislav%");
        foreach ($clients as $client) {
//            echo 'Name: ' . $client->name . ' <br />';
//            echo 'Contacts: ';
            foreach ($client->related('client_person')->where("name LIKE ?", "%Peter%") as $clientPerson) {
                echo $clientPerson->name . '-' . $clientPerson->client->name . '<br />';
            }
//        $contacts = $this->db->table('client_person');
//        $contacts->where('client.name LIKE ?','%moravia%');
//        foreach ($contacts as $contact){
//            echo 'Contact: '.$contact->name.'<br/>';

        }
        echo "-----------------<br />";
        $contacts = $this->db->table('client_person')
            ->where("client_person.name LIKE ?", "%Peter%")
            ->where("client.name LIKE ? ", "%Moravia%");
//            ->where("client.date_created > ?", Explorer::literal("NOW()"));
        foreach ($contacts as $contact) {
            echo $contact->name . ' - ' . $contact->client->name . ' <br />';
//            echo $contact->name . " - " . $contact->ref("client", "client_id")->name;
//            echo $contact->name . " - " . $contact->ref("login", "created_by")->name;
//            echo $contact->name . " - " . $contact->ref("login", "for_login_id")->name;
        }

//        $this->db->table("client")->insert([
//            "name" => "Anything",
//            "date_created" => Explorer::literal("NOW()")
//        ]);


    }

    public function createComponentClientDetail(): ClientDetail
    {
        $clientDetail = $this->clientDetailFactory->create();

        // volam udalost onChange - prekresli zoznam klientov po vytvoreni noveho klienta
        $clientDetail->onChange[] = function () {
            $this['customList']->redrawControl();
        };
        return $clientDetail;
    }

    public function createComponentClientList(): ClientList
    {
        $clientList = $this->clientListFactory->create();
        $clientList->onClick[] = function ($id) {
            $this["clientDetail"]->id = $id; //posielam perzistentny parameter do clientDetail
            $this->template->showModal = true;
            $this->redrawControl("modal");
        };
        return $clientList;
    }

    public function createComponentCustomList(): CustomList
    {
        $customList = $this->customListFactory->create(); // ekvivalent "new" - aby fungovalo inject
//      pouzijem SETTER metody pre vytvorenie zoznamu
        $customList->setTable("client");
        $customList->addColumn("name", "Název");
        $customList->addColumn("ico", "IČO");
        $customList->addColumn("email", "Email");

        $customList->onClick[] = function ($id) {
            $this["clientDetail"]->id = $id; //posielam perzistentny parameter do clientDetail
            $this->template->showModal = true;
            $this->redrawControl("modal");
        };
        return $customList;
    }

    /*
     * Funkcia na vykreslenie a upravu kontaktov klienta
     * contactId ma doniest id klienta a vypisat potrebne udaje
     * vyradena funkcia po vytvoreni komponenty customList
     */
    /*    public function handleEditPerson(int $contactId)
        {
            $values = $this->clientsRepo->fetchContact($contactId);
            $this['personForm']->setDefaults($values);
            $this->redrawControl("contactForm");
        }*/

    /*    public function handleDeleteContact(int $contactId)
        {
            $this->clientsPM->removeContact($contactId);
            $this->redrawControl("contactList");
        }*/

    public function handleShowModal()
    {
        $this->template->showModal = true;
        $this->redrawControl("modal");
    }

    public function handleCloseModal()
    {
        $this->redrawControl("modal");
    }

}
