/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/nette.config.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/nette.config.js":
/*!****************************!*\
  !*** ./js/nette.config.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var naja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! naja */ \"./node_modules/naja/dist/Naja.esm.js\");\n // inicializace naja pro spracování ajax požadavků v nette\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  return naja__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initialize({\n    history: false\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9uZXR0ZS5jb25maWcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9uZXR0ZS5jb25maWcuanM/NDg2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmFqYSBmcm9tICduYWphJztcblxuLy8gaW5pY2lhbGl6YWNlIG5hamEgcHJvIHNwcmFjb3bDoW7DrSBhamF4IHBvxb5hZGF2a8WvIHYgbmV0dGVcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiBuYWphLmluaXRpYWxpemUoe2hpc3Rvcnk6IGZhbHNlfSkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/nette.config.js\n");

/***/ }),

/***/ "./node_modules/event-target-shim/index.js":
/*!*************************************************!*\
  !*** ./node_modules/event-target-shim/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nfunction assertType(condition, message, ...args) {\n    if (!condition) {\n        throw new TypeError(format(message, args));\n    }\n}\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\nfunction format(message, args) {\n    let i = 0;\n    return message.replace(/%[os]/gu, () => anyToString(args[i++]));\n}\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\nfunction anyToString(x) {\n    if (typeof x !== \"object\" || x === null) {\n        return String(x);\n    }\n    return Object.prototype.toString.call(x);\n}\n\nlet currentErrorHandler;\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\nfunction setErrorHandler(value) {\n    assertType(typeof value === \"function\" || value === undefined, \"The error handler must be a function or undefined, but got %o.\", value);\n    currentErrorHandler = value;\n}\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\nfunction reportError(maybeError) {\n    try {\n        const error = maybeError instanceof Error\n            ? maybeError\n            : new Error(anyToString(maybeError));\n        // Call the user-defined error handler if exists.\n        if (currentErrorHandler) {\n            currentErrorHandler(error);\n            return;\n        }\n        // Dispatch an `error` event if this is on a browser.\n        if (typeof dispatchEvent === \"function\" &&\n            typeof ErrorEvent === \"function\") {\n            dispatchEvent(new ErrorEvent(\"error\", { error, message: error.message }));\n        }\n        // Emit an `uncaughtException` event if this is on Node.js.\n        //istanbul ignore else\n        else if (typeof process !== \"undefined\" &&\n            typeof process.emit === \"function\") {\n            process.emit(\"uncaughtException\", error);\n            return;\n        }\n        // Otherwise, print the error.\n        console.error(error);\n    }\n    catch (_a) {\n        // ignore.\n    }\n}\n\n/**\n * The global object.\n */\n//istanbul ignore next\nconst Global = typeof window !== \"undefined\"\n    ? window\n    : typeof self !== \"undefined\"\n        ? self\n        : typeof global !== \"undefined\"\n            ? global\n            : typeof globalThis !== \"undefined\"\n                ? globalThis\n                : undefined;\n\nlet currentWarnHandler;\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\nfunction setWarningHandler(value) {\n    assertType(typeof value === \"function\" || value === undefined, \"The warning handler must be a function or undefined, but got %o.\", value);\n    currentWarnHandler = value;\n}\n/**\n * The warning information.\n */\nclass Warning {\n    constructor(code, message) {\n        this.code = code;\n        this.message = message;\n    }\n    /**\n     * Report this warning.\n     * @param args The arguments of the warning.\n     */\n    warn(...args) {\n        var _a;\n        try {\n            // Call the user-defined warning handler if exists.\n            if (currentWarnHandler) {\n                currentWarnHandler({ ...this, args });\n                return;\n            }\n            // Otherwise, print the warning.\n            const stack = ((_a = new Error().stack) !== null && _a !== void 0 ? _a : \"\").replace(/^(?:.+?\\n){2}/gu, \"\\n\");\n            console.warn(this.message, ...args, stack);\n        }\n        catch (_b) {\n            // Ignore.\n        }\n    }\n}\n\nconst InitEventWasCalledWhileDispatching = new Warning(\"W01\", \"Unable to initialize event under dispatching.\");\nconst FalsyWasAssignedToCancelBubble = new Warning(\"W02\", \"Assigning any falsy value to 'cancelBubble' property has no effect.\");\nconst TruthyWasAssignedToReturnValue = new Warning(\"W03\", \"Assigning any truthy value to 'returnValue' property has no effect.\");\nconst NonCancelableEventWasCanceled = new Warning(\"W04\", \"Unable to preventDefault on non-cancelable events.\");\nconst CanceledInPassiveListener = new Warning(\"W05\", \"Unable to preventDefault inside passive event listener invocation.\");\nconst EventListenerWasDuplicated = new Warning(\"W06\", \"An event listener wasn't added because it has been added already: %o, %o\");\nconst OptionWasIgnored = new Warning(\"W07\", \"The %o option value was abandoned because the event listener wasn't added as duplicated.\");\nconst InvalidEventListener = new Warning(\"W08\", \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\");\nconst InvalidAttributeHandler = new Warning(\"W09\", \"Event attribute handler must be a function: %o\");\n\n/*eslint-disable class-methods-use-this */\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\nclass Event {\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    static get NONE() {\n        return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    static get CAPTURING_PHASE() {\n        return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    static get AT_TARGET() {\n        return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    static get BUBBLING_PHASE() {\n        return BUBBLING_PHASE;\n    }\n    /**\n     * Initialize this event instance.\n     * @param type The type of this event.\n     * @param eventInitDict Options to initialize.\n     * @see https://dom.spec.whatwg.org/#dom-event-event\n     */\n    constructor(type, eventInitDict) {\n        Object.defineProperty(this, \"isTrusted\", {\n            value: false,\n            enumerable: true,\n        });\n        const opts = eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {};\n        internalDataMap.set(this, {\n            type: String(type),\n            bubbles: Boolean(opts.bubbles),\n            cancelable: Boolean(opts.cancelable),\n            composed: Boolean(opts.composed),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n            inPassiveListenerFlag: false,\n            dispatchFlag: false,\n            timeStamp: Date.now(),\n        });\n    }\n    /**\n     * The type of this event.\n     * @see https://dom.spec.whatwg.org/#dom-event-type\n     */\n    get type() {\n        return $(this).type;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n    get target() {\n        return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @deprecated Use the `target` property instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n     */\n    get srcElement() {\n        return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n    get currentTarget() {\n        return $(this).currentTarget;\n    }\n    /**\n     * The event target of the current dispatching.\n     * This doesn't support node tree.\n     * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n     */\n    composedPath() {\n        const currentTarget = $(this).currentTarget;\n        if (currentTarget) {\n            return [currentTarget];\n        }\n        return [];\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    get NONE() {\n        return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n    get CAPTURING_PHASE() {\n        return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n    get AT_TARGET() {\n        return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n    get BUBBLING_PHASE() {\n        return BUBBLING_PHASE;\n    }\n    /**\n     * The current event phase.\n     * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n     */\n    get eventPhase() {\n        return $(this).dispatchFlag ? 2 : 0;\n    }\n    /**\n     * Stop event bubbling.\n     * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n     * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n     */\n    stopPropagation() {\n        $(this).stopPropagationFlag = true;\n    }\n    /**\n     * `true` if event bubbling was stopped.\n     * @deprecated\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    get cancelBubble() {\n        return $(this).stopPropagationFlag;\n    }\n    /**\n     * Stop event bubbling if `true` is set.\n     * @deprecated Use the `stopPropagation()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    set cancelBubble(value) {\n        if (value) {\n            $(this).stopPropagationFlag = true;\n        }\n        else {\n            FalsyWasAssignedToCancelBubble.warn();\n        }\n    }\n    /**\n     * Stop event bubbling and subsequent event listener callings.\n     * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n     */\n    stopImmediatePropagation() {\n        const data = $(this);\n        data.stopPropagationFlag = data.stopImmediatePropagationFlag = true;\n    }\n    /**\n     * `true` if this event will bubble.\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n     */\n    get bubbles() {\n        return $(this).bubbles;\n    }\n    /**\n     * `true` if this event can be canceled by the `preventDefault()` method.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n     */\n    get cancelable() {\n        return $(this).cancelable;\n    }\n    /**\n     * `true` if the default behavior will act.\n     * @deprecated Use the `defaultPrevented` proeprty instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    get returnValue() {\n        return !$(this).canceledFlag;\n    }\n    /**\n     * Cancel the default behavior if `false` is set.\n     * @deprecated Use the `preventDefault()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag($(this));\n        }\n        else {\n            TruthyWasAssignedToReturnValue.warn();\n        }\n    }\n    /**\n     * Cancel the default behavior.\n     * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n     */\n    preventDefault() {\n        setCancelFlag($(this));\n    }\n    /**\n     * `true` if the default behavior was canceled.\n     * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n     */\n    get defaultPrevented() {\n        return $(this).canceledFlag;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    get composed() {\n        return $(this).composed;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n     */\n    //istanbul ignore next\n    get isTrusted() {\n        return false;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n     */\n    get timeStamp() {\n        return $(this).timeStamp;\n    }\n    /**\n     * @deprecated Don't use this method. The constructor did initialization.\n     */\n    initEvent(type, bubbles = false, cancelable = false) {\n        const data = $(this);\n        if (data.dispatchFlag) {\n            InitEventWasCalledWhileDispatching.warn();\n            return;\n        }\n        internalDataMap.set(this, {\n            ...data,\n            type: String(type),\n            bubbles: Boolean(bubbles),\n            cancelable: Boolean(cancelable),\n            target: null,\n            currentTarget: null,\n            stopPropagationFlag: false,\n            stopImmediatePropagationFlag: false,\n            canceledFlag: false,\n        });\n    }\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst NONE = 0;\nconst CAPTURING_PHASE = 1;\nconst AT_TARGET = 2;\nconst BUBBLING_PHASE = 3;\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(event, name = \"this\") {\n    const retv = internalDataMap.get(event);\n    assertType(retv != null, \"'%s' must be an object that Event constructor created, but got another one: %o\", name, event);\n    return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\nfunction setCancelFlag(data) {\n    if (data.inPassiveListenerFlag) {\n        CanceledInPassiveListener.warn();\n        return;\n    }\n    if (!data.cancelable) {\n        NonCancelableEventWasCanceled.warn();\n        return;\n    }\n    data.canceledFlag = true;\n}\n// Set enumerable\nObject.defineProperty(Event, \"NONE\", { enumerable: true });\nObject.defineProperty(Event, \"CAPTURING_PHASE\", { enumerable: true });\nObject.defineProperty(Event, \"AT_TARGET\", { enumerable: true });\nObject.defineProperty(Event, \"BUBBLING_PHASE\", { enumerable: true });\nconst keys = Object.getOwnPropertyNames(Event.prototype);\nfor (let i = 0; i < keys.length; ++i) {\n    if (keys[i] === \"constructor\") {\n        continue;\n    }\n    Object.defineProperty(Event.prototype, keys[i], { enumerable: true });\n}\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, Global.Event.prototype);\n}\n\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\nfunction createInvalidStateError(message) {\n    if (Global.DOMException) {\n        return new Global.DOMException(message, \"InvalidStateError\");\n    }\n    if (DOMException == null) {\n        DOMException = class DOMException extends Error {\n            constructor(msg) {\n                super(msg);\n                if (Error.captureStackTrace) {\n                    Error.captureStackTrace(this, DOMException);\n                }\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get code() {\n                return 11;\n            }\n            // eslint-disable-next-line class-methods-use-this\n            get name() {\n                return \"InvalidStateError\";\n            }\n        };\n        Object.defineProperties(DOMException.prototype, {\n            code: { enumerable: true },\n            name: { enumerable: true },\n        });\n        defineErrorCodeProperties(DOMException);\n        defineErrorCodeProperties(DOMException.prototype);\n    }\n    return new DOMException(message);\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nlet DOMException;\nconst ErrorCodeMap = {\n    INDEX_SIZE_ERR: 1,\n    DOMSTRING_SIZE_ERR: 2,\n    HIERARCHY_REQUEST_ERR: 3,\n    WRONG_DOCUMENT_ERR: 4,\n    INVALID_CHARACTER_ERR: 5,\n    NO_DATA_ALLOWED_ERR: 6,\n    NO_MODIFICATION_ALLOWED_ERR: 7,\n    NOT_FOUND_ERR: 8,\n    NOT_SUPPORTED_ERR: 9,\n    INUSE_ATTRIBUTE_ERR: 10,\n    INVALID_STATE_ERR: 11,\n    SYNTAX_ERR: 12,\n    INVALID_MODIFICATION_ERR: 13,\n    NAMESPACE_ERR: 14,\n    INVALID_ACCESS_ERR: 15,\n    VALIDATION_ERR: 16,\n    TYPE_MISMATCH_ERR: 17,\n    SECURITY_ERR: 18,\n    NETWORK_ERR: 19,\n    ABORT_ERR: 20,\n    URL_MISMATCH_ERR: 21,\n    QUOTA_EXCEEDED_ERR: 22,\n    TIMEOUT_ERR: 23,\n    INVALID_NODE_TYPE_ERR: 24,\n    DATA_CLONE_ERR: 25,\n};\nfunction defineErrorCodeProperties(obj) {\n    const keys = Object.keys(ErrorCodeMap);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        const value = ErrorCodeMap[key];\n        Object.defineProperty(obj, key, {\n            get() {\n                return value;\n            },\n            configurable: true,\n            enumerable: true,\n        });\n    }\n}\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\nclass EventWrapper extends Event {\n    /**\n     * Wrap a given event object to control states.\n     * @param event The event-like object to wrap.\n     */\n    static wrap(event) {\n        return new (getWrapperClassOf(event))(event);\n    }\n    constructor(event) {\n        super(event.type, {\n            bubbles: event.bubbles,\n            cancelable: event.cancelable,\n            composed: event.composed,\n        });\n        if (event.cancelBubble) {\n            super.stopPropagation();\n        }\n        if (event.defaultPrevented) {\n            super.preventDefault();\n        }\n        internalDataMap$1.set(this, { original: event });\n        // Define accessors\n        const keys = Object.keys(event);\n        for (let i = 0; i < keys.length; ++i) {\n            const key = keys[i];\n            if (!(key in this)) {\n                Object.defineProperty(this, key, defineRedirectDescriptor(event, key));\n            }\n        }\n    }\n    stopPropagation() {\n        super.stopPropagation();\n        const { original } = $$1(this);\n        if (\"stopPropagation\" in original) {\n            original.stopPropagation();\n        }\n    }\n    get cancelBubble() {\n        return super.cancelBubble;\n    }\n    set cancelBubble(value) {\n        super.cancelBubble = value;\n        const { original } = $$1(this);\n        if (\"cancelBubble\" in original) {\n            original.cancelBubble = value;\n        }\n    }\n    stopImmediatePropagation() {\n        super.stopImmediatePropagation();\n        const { original } = $$1(this);\n        if (\"stopImmediatePropagation\" in original) {\n            original.stopImmediatePropagation();\n        }\n    }\n    get returnValue() {\n        return super.returnValue;\n    }\n    set returnValue(value) {\n        super.returnValue = value;\n        const { original } = $$1(this);\n        if (\"returnValue\" in original) {\n            original.returnValue = value;\n        }\n    }\n    preventDefault() {\n        super.preventDefault();\n        const { original } = $$1(this);\n        if (\"preventDefault\" in original) {\n            original.preventDefault();\n        }\n    }\n    get timeStamp() {\n        const { original } = $$1(this);\n        if (\"timeStamp\" in original) {\n            return original.timeStamp;\n        }\n        return super.timeStamp;\n    }\n}\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap$1 = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\nfunction $$1(event) {\n    const retv = internalDataMap$1.get(event);\n    assertType(retv != null, \"'this' is expected an Event object, but got\", event);\n    return retv;\n}\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrapperClassCache = new WeakMap();\n// Make association for wrappers.\nwrapperClassCache.set(Object.prototype, EventWrapper);\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n    wrapperClassCache.set(Global.Event.prototype, EventWrapper);\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\nfunction getWrapperClassOf(originalEvent) {\n    const prototype = Object.getPrototypeOf(originalEvent);\n    if (prototype == null) {\n        return EventWrapper;\n    }\n    let wrapper = wrapperClassCache.get(prototype);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapperClassOf(prototype), prototype);\n        wrapperClassCache.set(prototype, wrapper);\n    }\n    return wrapper;\n}\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\nfunction defineWrapper(BaseEventWrapper, originalPrototype) {\n    class CustomEventWrapper extends BaseEventWrapper {\n    }\n    const keys = Object.keys(originalPrototype);\n    for (let i = 0; i < keys.length; ++i) {\n        Object.defineProperty(CustomEventWrapper.prototype, keys[i], defineRedirectDescriptor(originalPrototype, keys[i]));\n    }\n    return CustomEventWrapper;\n}\n/**\n * Get the property descriptor to redirect a given property.\n */\nfunction defineRedirectDescriptor(obj, key) {\n    const d = Object.getOwnPropertyDescriptor(obj, key);\n    return {\n        get() {\n            const original = $$1(this).original;\n            const value = original[key];\n            if (typeof value === \"function\") {\n                return value.bind(original);\n            }\n            return value;\n        },\n        set(value) {\n            const original = $$1(this).original;\n            original[key] = value;\n        },\n        configurable: d.configurable,\n        enumerable: d.enumerable,\n    };\n}\n\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\nfunction createListener(callback, capture, passive, once, signal, signalListener) {\n    return {\n        callback,\n        flags: (capture ? 1 /* Capture */ : 0) |\n            (passive ? 2 /* Passive */ : 0) |\n            (once ? 4 /* Once */ : 0),\n        signal,\n        signalListener,\n    };\n}\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\nfunction setRemoved(listener) {\n    listener.flags |= 8 /* Removed */;\n}\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\nfunction isCapture(listener) {\n    return (listener.flags & 1 /* Capture */) === 1 /* Capture */;\n}\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\nfunction isPassive(listener) {\n    return (listener.flags & 2 /* Passive */) === 2 /* Passive */;\n}\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\nfunction isOnce(listener) {\n    return (listener.flags & 4 /* Once */) === 4 /* Once */;\n}\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\nfunction isRemoved(listener) {\n    return (listener.flags & 8 /* Removed */) === 8 /* Removed */;\n}\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\nfunction invokeCallback({ callback }, target, event) {\n    try {\n        if (typeof callback === \"function\") {\n            callback.call(target, event);\n        }\n        else if (typeof callback.handleEvent === \"function\") {\n            callback.handleEvent(event);\n        }\n    }\n    catch (thrownError) {\n        reportError(thrownError);\n    }\n}\n\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\nfunction findIndexOfListener({ listeners }, callback, capture) {\n    for (let i = 0; i < listeners.length; ++i) {\n        if (listeners[i].callback === callback &&\n            isCapture(listeners[i]) === capture) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\nfunction addListener(list, callback, capture, passive, once, signal) {\n    let signalListener;\n    if (signal) {\n        signalListener = removeListener.bind(null, list, callback, capture);\n        signal.addEventListener(\"abort\", signalListener);\n    }\n    const listener = createListener(callback, capture, passive, once, signal, signalListener);\n    if (list.cow) {\n        list.cow = false;\n        list.listeners = [...list.listeners, listener];\n    }\n    else {\n        list.listeners.push(listener);\n    }\n    return listener;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\nfunction removeListener(list, callback, capture) {\n    const index = findIndexOfListener(list, callback, capture);\n    if (index !== -1) {\n        return removeListenerAt(list, index);\n    }\n    return false;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\nfunction removeListenerAt(list, index, disableCow = false) {\n    const listener = list.listeners[index];\n    // Set the removed flag.\n    setRemoved(listener);\n    // Dispose the abort signal listener if exists.\n    if (listener.signal) {\n        listener.signal.removeEventListener(\"abort\", listener.signalListener);\n    }\n    // Remove it from the array.\n    if (list.cow && !disableCow) {\n        list.cow = false;\n        list.listeners = list.listeners.filter((_, i) => i !== index);\n        return false;\n    }\n    list.listeners.splice(index, 1);\n    return true;\n}\n\n/**\n * Create a new `ListenerListMap` object.\n */\nfunction createListenerListMap() {\n    return Object.create(null);\n}\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\nfunction ensureListenerList(listenerMap, type) {\n    var _a;\n    return ((_a = listenerMap[type]) !== null && _a !== void 0 ? _a : (listenerMap[type] = {\n        attrCallback: undefined,\n        attrListener: undefined,\n        cow: false,\n        listeners: [],\n    }));\n}\n\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\nclass EventTarget {\n    /**\n     * Initialize this instance.\n     */\n    constructor() {\n        internalDataMap$2.set(this, createListenerListMap());\n    }\n    // Implementation\n    addEventListener(type0, callback0, options0) {\n        const listenerMap = $$2(this);\n        const { callback, capture, once, passive, signal, type, } = normalizeAddOptions(type0, callback0, options0);\n        if (callback == null || (signal === null || signal === void 0 ? void 0 : signal.aborted)) {\n            return;\n        }\n        const list = ensureListenerList(listenerMap, type);\n        // Find existing listener.\n        const i = findIndexOfListener(list, callback, capture);\n        if (i !== -1) {\n            warnDuplicate(list.listeners[i], passive, once, signal);\n            return;\n        }\n        // Add the new listener.\n        addListener(list, callback, capture, passive, once, signal);\n    }\n    // Implementation\n    removeEventListener(type0, callback0, options0) {\n        const listenerMap = $$2(this);\n        const { callback, capture, type } = normalizeOptions(type0, callback0, options0);\n        const list = listenerMap[type];\n        if (callback != null && list) {\n            removeListener(list, callback, capture);\n        }\n    }\n    // Implementation\n    dispatchEvent(e) {\n        const list = $$2(this)[String(e.type)];\n        if (list == null) {\n            return true;\n        }\n        const event = e instanceof Event ? e : EventWrapper.wrap(e);\n        const eventData = $(event, \"event\");\n        if (eventData.dispatchFlag) {\n            throw createInvalidStateError(\"This event has been in dispatching.\");\n        }\n        eventData.dispatchFlag = true;\n        eventData.target = eventData.currentTarget = this;\n        if (!eventData.stopPropagationFlag) {\n            const { cow, listeners } = list;\n            // Set copy-on-write flag.\n            list.cow = true;\n            // Call listeners.\n            for (let i = 0; i < listeners.length; ++i) {\n                const listener = listeners[i];\n                // Skip if removed.\n                if (isRemoved(listener)) {\n                    continue;\n                }\n                // Remove this listener if has the `once` flag.\n                if (isOnce(listener) && removeListenerAt(list, i, !cow)) {\n                    // Because this listener was removed, the next index is the\n                    // same as the current value.\n                    i -= 1;\n                }\n                // Call this listener with the `passive` flag.\n                eventData.inPassiveListenerFlag = isPassive(listener);\n                invokeCallback(listener, this, event);\n                eventData.inPassiveListenerFlag = false;\n                // Stop if the `event.stopImmediatePropagation()` method was called.\n                if (eventData.stopImmediatePropagationFlag) {\n                    break;\n                }\n            }\n            // Restore copy-on-write flag.\n            if (!cow) {\n                list.cow = false;\n            }\n        }\n        eventData.target = null;\n        eventData.currentTarget = null;\n        eventData.stopImmediatePropagationFlag = false;\n        eventData.stopPropagationFlag = false;\n        eventData.dispatchFlag = false;\n        return !eventData.canceledFlag;\n    }\n}\n/**\n * Internal data.\n */\nconst internalDataMap$2 = new WeakMap();\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $$2(target, name = \"this\") {\n    const retv = internalDataMap$2.get(target);\n    assertType(retv != null, \"'%s' must be an object that EventTarget constructor created, but got another one: %o\", name, target);\n    return retv;\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeAddOptions(type, callback, options) {\n    var _a;\n    assertCallback(callback);\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback !== null && callback !== void 0 ? callback : undefined,\n            capture: Boolean(options.capture),\n            passive: Boolean(options.passive),\n            once: Boolean(options.once),\n            signal: (_a = options.signal) !== null && _a !== void 0 ? _a : undefined,\n        };\n    }\n    return {\n        type: String(type),\n        callback: callback !== null && callback !== void 0 ? callback : undefined,\n        capture: Boolean(options),\n        passive: false,\n        once: false,\n        signal: undefined,\n    };\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeOptions(type, callback, options) {\n    assertCallback(callback);\n    if (typeof options === \"object\" && options !== null) {\n        return {\n            type: String(type),\n            callback: callback !== null && callback !== void 0 ? callback : undefined,\n            capture: Boolean(options.capture),\n        };\n    }\n    return {\n        type: String(type),\n        callback: callback !== null && callback !== void 0 ? callback : undefined,\n        capture: Boolean(options),\n    };\n}\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\nfunction assertCallback(callback) {\n    if (typeof callback === \"function\" ||\n        (typeof callback === \"object\" &&\n            callback !== null &&\n            typeof callback.handleEvent === \"function\")) {\n        return;\n    }\n    if (callback == null || typeof callback === \"object\") {\n        InvalidEventListener.warn(callback);\n        return;\n    }\n    throw new TypeError(format(InvalidEventListener.message, [callback]));\n}\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\nfunction warnDuplicate(listener, passive, once, signal) {\n    EventListenerWasDuplicated.warn(isCapture(listener) ? \"capture\" : \"bubble\", listener.callback);\n    if (isPassive(listener) !== passive) {\n        OptionWasIgnored.warn(\"passive\");\n    }\n    if (isOnce(listener) !== once) {\n        OptionWasIgnored.warn(\"once\");\n    }\n    if (listener.signal !== signal) {\n        OptionWasIgnored.warn(\"signal\");\n    }\n}\n// Set enumerable\nconst keys$1 = Object.getOwnPropertyNames(EventTarget.prototype);\nfor (let i = 0; i < keys$1.length; ++i) {\n    if (keys$1[i] === \"constructor\") {\n        continue;\n    }\n    Object.defineProperty(EventTarget.prototype, keys$1[i], { enumerable: true });\n}\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (typeof Global !== \"undefined\" &&\n    typeof Global.EventTarget !== \"undefined\") {\n    Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype);\n}\n\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\nfunction getEventAttributeValue(target, type) {\n    var _a, _b;\n    const listMap = $$2(target, \"target\");\n    return (_b = (_a = listMap[type]) === null || _a === void 0 ? void 0 : _a.attrCallback) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction setEventAttributeValue(target, type, callback) {\n    if (callback != null && typeof callback !== \"function\") {\n        InvalidAttributeHandler.warn(callback);\n    }\n    if (typeof callback === \"function\" ||\n        (typeof callback === \"object\" && callback !== null)) {\n        upsertEventAttributeListener(target, type, callback);\n    }\n    else {\n        removeEventAttributeListener(target, type);\n    }\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction upsertEventAttributeListener(target, type, callback) {\n    const list = ensureListenerList($$2(target, \"target\"), String(type));\n    list.attrCallback = callback;\n    if (list.attrListener == null) {\n        list.attrListener = addListener(list, defineEventAttributeCallback(list), false, false, false, undefined);\n    }\n}\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction removeEventAttributeListener(target, type) {\n    const listMap = $$2(target, \"target\");\n    const list = listMap[String(type)];\n    if (list && list.attrListener) {\n        removeListener(list, list.attrListener.callback, false);\n        list.attrCallback = list.attrListener = undefined;\n    }\n}\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\nfunction defineEventAttributeCallback(list) {\n    return function (event) {\n        const callback = list.attrCallback;\n        if (typeof callback === \"function\") {\n            callback.call(this, event);\n        }\n    };\n}\n\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nfunction defineCustomEventTarget(...types) {\n    class CustomEventTarget extends EventTarget {\n    }\n    for (let i = 0; i < types.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, types[i]);\n    }\n    return CustomEventTarget;\n}\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nfunction defineEventAttribute(target, type, _eventClass) {\n    Object.defineProperty(target, `on${type}`, {\n        get() {\n            return getEventAttributeValue(this, type);\n        },\n        set(value) {\n            setEventAttributeValue(this, type, value);\n        },\n        configurable: true,\n        enumerable: true,\n    });\n}\n\nexports.Event = Event;\nexports.EventTarget = EventTarget;\nexports.default = EventTarget;\nexports.defineCustomEventTarget = defineCustomEventTarget;\nexports.defineEventAttribute = defineEventAttribute;\nexports.getEventAttributeValue = getEventAttributeValue;\nexports.setErrorHandler = setErrorHandler;\nexports.setEventAttributeValue = setEventAttributeValue;\nexports.setWarningHandler = setWarningHandler;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/event-target-shim/index.js\n");

/***/ }),

/***/ "./node_modules/naja/dist/Naja.esm.js":
/*!********************************************!*\
  !*** ./node_modules/naja/dist/Naja.esm.js ***!
  \********************************************/
/*! exports provided: default, HttpError, Naja */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpError\", function() { return HttpError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Naja\", function() { return Naja; });\n/* harmony import */ var event_target_shim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! event-target-shim */ \"./node_modules/event-target-shim/index.js\");\n/* harmony import */ var event_target_shim__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(event_target_shim__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Naja.js\n * 2.1.5\n *\n * by Jiří Pudil <https://jiripudil.cz>\n */\n\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function (factory) {\n  factory();\n}((function () {\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  var Emitter = /*#__PURE__*/function () {\n    function Emitter() {\n      _classCallCheck(this, Emitter);\n\n      Object.defineProperty(this, 'listeners', {\n        value: {},\n        writable: true,\n        configurable: true\n      });\n    }\n\n    _createClass(Emitter, [{\n      key: \"addEventListener\",\n      value: function addEventListener(type, callback, options) {\n        if (!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n\n        this.listeners[type].push({\n          callback: callback,\n          options: options\n        });\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n          return;\n        }\n\n        var stack = this.listeners[type];\n\n        for (var i = 0, l = stack.length; i < l; i++) {\n          if (stack[i].callback === callback) {\n            stack.splice(i, 1);\n            return;\n          }\n        }\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        if (!(event.type in this.listeners)) {\n          return;\n        }\n\n        var stack = this.listeners[event.type];\n        var stackToCall = stack.slice();\n\n        for (var i = 0, l = stackToCall.length; i < l; i++) {\n          var listener = stackToCall[i];\n\n          try {\n            listener.callback.call(this, event);\n          } catch (e) {\n            Promise.resolve().then(function () {\n              throw e;\n            });\n          }\n\n          if (listener.options && listener.options.once) {\n            this.removeEventListener(event.type, listener.callback);\n          }\n        }\n\n        return !event.defaultPrevented;\n      }\n    }]);\n\n    return Emitter;\n  }();\n\n  var AbortSignal = /*#__PURE__*/function (_Emitter) {\n    _inherits(AbortSignal, _Emitter);\n\n    var _super = _createSuper(AbortSignal);\n\n    function AbortSignal() {\n      var _this;\n\n      _classCallCheck(this, AbortSignal);\n\n      _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent\n      // constructor has failed to run, then \"this.listeners\" will still be undefined and then we call\n      // the parent constructor directly instead as a workaround. For general details, see babel bug:\n      // https://github.com/babel/babel/issues/3041\n      // This hack was added as a fix for the issue described here:\n      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042\n\n      if (!_this.listeners) {\n        Emitter.call(_assertThisInitialized(_this));\n      } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl\n\n\n      Object.defineProperty(_assertThisInitialized(_this), 'aborted', {\n        value: false,\n        writable: true,\n        configurable: true\n      });\n      Object.defineProperty(_assertThisInitialized(_this), 'onabort', {\n        value: null,\n        writable: true,\n        configurable: true\n      });\n      return _this;\n    }\n\n    _createClass(AbortSignal, [{\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortSignal]';\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        if (event.type === 'abort') {\n          this.aborted = true;\n\n          if (typeof this.onabort === 'function') {\n            this.onabort.call(this, event);\n          }\n        }\n\n        _get(_getPrototypeOf(AbortSignal.prototype), \"dispatchEvent\", this).call(this, event);\n      }\n    }]);\n\n    return AbortSignal;\n  }(Emitter);\n  var AbortController = /*#__PURE__*/function () {\n    function AbortController() {\n      _classCallCheck(this, AbortController);\n\n      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n      // we want Object.keys(new AbortController()) to be [] for compat with the native impl\n      Object.defineProperty(this, 'signal', {\n        value: new AbortSignal(),\n        writable: true,\n        configurable: true\n      });\n    }\n\n    _createClass(AbortController, [{\n      key: \"abort\",\n      value: function abort() {\n        var event;\n\n        try {\n          event = new Event('abort');\n        } catch (e) {\n          if (typeof document !== 'undefined') {\n            if (!document.createEvent) {\n              // For Internet Explorer 8:\n              event = document.createEventObject();\n              event.type = 'abort';\n            } else {\n              // For Internet Explorer 11:\n              event = document.createEvent('Event');\n              event.initEvent('abort', false, false);\n            }\n          } else {\n            // Fallback where document isn't available:\n            event = {\n              type: 'abort',\n              bubbles: false,\n              cancelable: false\n            };\n          }\n        }\n\n        this.signal.dispatchEvent(event);\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        return '[object AbortController]';\n      }\n    }]);\n\n    return AbortController;\n  }();\n\n  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n    // These are necessary to make sure that we get correct output for:\n    // Object.prototype.toString.call(new AbortController())\n    AbortController.prototype[Symbol.toStringTag] = 'AbortController';\n    AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';\n  }\n\n  function polyfillNeeded(self) {\n    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n      console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');\n      return true;\n    } // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n    // defining window.Request, and this polyfill need to work on top of unfetch\n    // so the below feature detection needs the !self.AbortController part.\n    // The Request.prototype check is also needed because Safari versions 11.1.2\n    // up to and including 12.1.x has a window.AbortController present but still\n    // does NOT correctly implement abortable fetch:\n    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2\n\n\n    return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;\n  }\n\n  /**\n   * Note: the \"fetch.Request\" default value is available for fetch imported from\n   * the \"node-fetch\" package and not in browsers. This is OK since browsers\n   * will be importing umd-polyfill.js from that path \"self\" is passed the\n   * decorator so the default value will not be used (because browsers that define\n   * fetch also has Request). One quirky setup where self.fetch exists but\n   * self.Request does not is when the \"unfetch\" minimal fetch polyfill is used\n   * on top of IE11; for this case the browser will try to use the fetch.Request\n   * default value which in turn will be undefined but then then \"if (Request)\"\n   * will ensure that you get a patched fetch but still no Request (as expected).\n   * @param {fetch, Request = fetch.Request}\n   * @returns {fetch: abortableFetch, Request: AbortableRequest}\n   */\n\n  function abortableFetchDecorator(patchTargets) {\n    if ('function' === typeof patchTargets) {\n      patchTargets = {\n        fetch: patchTargets\n      };\n    }\n\n    var _patchTargets = patchTargets,\n        fetch = _patchTargets.fetch,\n        _patchTargets$Request = _patchTargets.Request,\n        NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,\n        NativeAbortController = _patchTargets.AbortController,\n        _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,\n        __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;\n\n    if (!polyfillNeeded({\n      fetch: fetch,\n      Request: NativeRequest,\n      AbortController: NativeAbortController,\n      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL\n    })) {\n      return {\n        fetch: fetch,\n        Request: Request\n      };\n    }\n\n    var Request = NativeRequest; // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n    // defining window.Request, and this polyfill need to work on top of unfetch\n    // hence we only patch it if it's available. Also we don't patch it if signal\n    // is already available on the Request prototype because in this case support\n    // is present and the patching below can cause a crash since it assigns to\n    // request.signal which is technically a read-only property. This latter error\n    // happens when you run the main5.js node-fetch example in the repo\n    // \"abortcontroller-polyfill-examples\". The exact error is:\n    //   request.signal = init.signal;\n    //   ^\n    // TypeError: Cannot set property signal of #<Request> which has only a getter\n\n    if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n      Request = function Request(input, init) {\n        var signal;\n\n        if (init && init.signal) {\n          signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has\n          // been installed because if we're running on top of a browser with a\n          // working native AbortController (i.e. the polyfill was installed due to\n          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n          // fake AbortSignal to the native fetch will trigger:\n          // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.\n\n          delete init.signal;\n        }\n\n        var request = new NativeRequest(input, init);\n\n        if (signal) {\n          Object.defineProperty(request, 'signal', {\n            writable: false,\n            enumerable: false,\n            configurable: true,\n            value: signal\n          });\n        }\n\n        return request;\n      };\n\n      Request.prototype = NativeRequest.prototype;\n    }\n\n    var realFetch = fetch;\n\n    var abortableFetch = function abortableFetch(input, init) {\n      var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;\n\n      if (signal) {\n        var abortError;\n\n        try {\n          abortError = new DOMException('Aborted', 'AbortError');\n        } catch (err) {\n          // IE 11 does not support calling the DOMException constructor, use a\n          // regular error object on it instead.\n          abortError = new Error('Aborted');\n          abortError.name = 'AbortError';\n        } // Return early if already aborted, thus avoiding making an HTTP request\n\n\n        if (signal.aborted) {\n          return Promise.reject(abortError);\n        } // Turn an event into a promise, reject it once `abort` is dispatched\n\n\n        var cancellation = new Promise(function (_, reject) {\n          signal.addEventListener('abort', function () {\n            return reject(abortError);\n          }, {\n            once: true\n          });\n        });\n\n        if (init && init.signal) {\n          // Never pass .signal to the native implementation when the polyfill has\n          // been installed because if we're running on top of a browser with a\n          // working native AbortController (i.e. the polyfill was installed due to\n          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n          // fake AbortSignal to the native fetch will trigger:\n          // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.\n          delete init.signal;\n        } // Return the fastest promise (don't need to wait for request to finish)\n\n\n        return Promise.race([cancellation, realFetch(input, init)]);\n      }\n\n      return realFetch(input, init);\n    };\n\n    return {\n      fetch: abortableFetch,\n      Request: Request\n    };\n  }\n\n  (function (self) {\n\n    if (!polyfillNeeded(self)) {\n      return;\n    }\n\n    if (!self.fetch) {\n      console.warn('fetch() is not available, cannot install abortcontroller-polyfill');\n      return;\n    }\n\n    var _abortableFetch = abortableFetchDecorator(self),\n        fetch = _abortableFetch.fetch,\n        Request = _abortableFetch.Request;\n\n    self.fetch = fetch;\n    self.Request = Request;\n    Object.defineProperty(self, 'AbortController', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: AbortController\n    });\n    Object.defineProperty(self, 'AbortSignal', {\n      writable: true,\n      enumerable: false,\n      configurable: true,\n      value: AbortSignal\n    });\n  })(typeof self !== 'undefined' ? self : commonjsGlobal);\n\n})));\n\n// https://bugs.webkit.org/show_bug.cgi?id=174980\n\ntry {\n  new window.EventTarget();\n} catch (error) {\n  window.EventTarget = event_target_shim__WEBPACK_IMPORTED_MODULE_0__[\"EventTarget\"];\n}\n\nclass AssertionError extends Error {\n}\nconst assert = (condition, description) => {\n    if (!condition) {\n        const message = `Assertion failed${description !== undefined ? `: ${description}` : '.'}`;\n        throw new AssertionError(message);\n    }\n};\n\nclass UIHandler extends EventTarget {\n    constructor(naja) {\n        super();\n        this.naja = naja;\n        this.selector = '.ajax';\n        this.allowedOrigins = [window.location.origin];\n        this.handler = this.handleUI.bind(this);\n        naja.addEventListener('init', this.initialize.bind(this));\n    }\n    initialize() {\n        this.bindUI(window.document.body);\n        this.naja.snippetHandler.addEventListener('afterUpdate', (event) => {\n            const { snippet } = event.detail;\n            this.bindUI(snippet);\n        });\n    }\n    bindUI(element) {\n        const selectors = [\n            `a${this.selector}`,\n            `input[type=\"submit\"]${this.selector}`,\n            `input[type=\"image\"]${this.selector}`,\n            `button[type=\"submit\"]${this.selector}`,\n            `form${this.selector} input[type=\"submit\"]`,\n            `form${this.selector} input[type=\"image\"]`,\n            `form${this.selector} button[type=\"submit\"]`,\n        ].join(', ');\n        const bindElement = (element) => {\n            element.removeEventListener('click', this.handler);\n            element.addEventListener('click', this.handler);\n        };\n        const elements = element.querySelectorAll(selectors);\n        for (let i = 0; i < elements.length; i++) {\n            bindElement(elements.item(i));\n        }\n        if (element.matches(selectors)) {\n            bindElement(element);\n        }\n        const bindForm = (form) => {\n            form.removeEventListener('submit', this.handler);\n            form.addEventListener('submit', this.handler);\n        };\n        if (element.matches(`form${this.selector}`)) {\n            bindForm(element);\n        }\n        const forms = element.querySelectorAll(`form${this.selector}`);\n        for (let i = 0; i < forms.length; i++) {\n            bindForm(forms.item(i));\n        }\n    }\n    handleUI(event) {\n        const mouseEvent = event;\n        if (mouseEvent.altKey || mouseEvent.ctrlKey || mouseEvent.shiftKey || mouseEvent.metaKey || mouseEvent.button) {\n            return;\n        }\n        const element = event.currentTarget;\n        const options = {};\n        const ignoreErrors = () => {\n            // don't reject the promise in case of an error as developers have no way of handling the rejection\n            // in this situation; errors should be handled in `naja.addEventListener('error', errorHandler)`\n        };\n        if (event.type === 'submit') {\n            this.submitForm(element, options, event).catch(ignoreErrors);\n        }\n        else if (event.type === 'click') {\n            this.clickElement(element, options, mouseEvent).catch(ignoreErrors);\n        }\n    }\n    async clickElement(element, options = {}, event) {\n        var _a, _b, _c, _d, _e, _f;\n        let method = 'GET', url = '', data;\n        if (!this.dispatchEvent(new CustomEvent('interaction', { cancelable: true, detail: { element, originalEvent: event, options } }))) {\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n            return {};\n        }\n        if (element.tagName === 'A') {\n            assert(element instanceof HTMLAnchorElement);\n            method = 'GET';\n            url = element.href;\n            data = null;\n        }\n        else if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {\n            assert(element instanceof HTMLInputElement || element instanceof HTMLButtonElement);\n            const { form } = element;\n            // eslint-disable-next-line no-nested-ternary,no-extra-parens\n            method = (_d = (_b = (_a = element.getAttribute('formmethod')) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : (_c = form === null || form === void 0 ? void 0 : form.getAttribute('method')) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : 'GET';\n            url = (_f = (_e = element.getAttribute('formaction')) !== null && _e !== void 0 ? _e : form === null || form === void 0 ? void 0 : form.getAttribute('action')) !== null && _f !== void 0 ? _f : window.location.pathname + window.location.search;\n            data = new FormData(form !== null && form !== void 0 ? form : undefined);\n            if (element.type === 'submit' || element.tagName === 'BUTTON') {\n                data.append(element.name, element.value || '');\n            }\n            else if (element.type === 'image') {\n                const coords = element.getBoundingClientRect();\n                data.append(`${element.name}.x`, Math.max(0, Math.floor(event !== undefined ? event.pageX - coords.left : 0)));\n                data.append(`${element.name}.y`, Math.max(0, Math.floor(event !== undefined ? event.pageY - coords.top : 0)));\n            }\n        }\n        if (!this.isUrlAllowed(url)) {\n            throw new Error(`Cannot dispatch async request, URL is not allowed: ${url}`);\n        }\n        event === null || event === void 0 ? void 0 : event.preventDefault();\n        return this.naja.makeRequest(method, url, data, options);\n    }\n    async submitForm(form, options = {}, event) {\n        var _a, _b, _c;\n        if (!this.dispatchEvent(new CustomEvent('interaction', { cancelable: true, detail: { element: form, originalEvent: event, options } }))) {\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n            return {};\n        }\n        const method = (_b = (_a = form.getAttribute('method')) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : 'GET';\n        const url = (_c = form.getAttribute('action')) !== null && _c !== void 0 ? _c : window.location.pathname + window.location.search;\n        const data = new FormData(form);\n        if (!this.isUrlAllowed(url)) {\n            throw new Error(`Cannot dispatch async request, URL is not allowed: ${url}`);\n        }\n        event === null || event === void 0 ? void 0 : event.preventDefault();\n        return this.naja.makeRequest(method, url, data, options);\n    }\n    isUrlAllowed(url) {\n        const urlObject = new URL(url, location.href);\n        // ignore non-URL URIs (javascript:, data:, mailto:, ...)\n        if (urlObject.origin === 'null') {\n            return false;\n        }\n        return this.allowedOrigins.includes(urlObject.origin);\n    }\n}\n\nclass FormsHandler {\n    constructor(naja) {\n        this.naja = naja;\n        naja.addEventListener('init', this.initialize.bind(this));\n        naja.uiHandler.addEventListener('interaction', this.processForm.bind(this));\n    }\n    initialize() {\n        this.initForms(window.document.body);\n        this.naja.snippetHandler.addEventListener('afterUpdate', (event) => {\n            const { snippet } = event.detail;\n            this.initForms(snippet);\n        });\n    }\n    initForms(element) {\n        const netteForms = this.netteForms || window.Nette;\n        if (netteForms) {\n            if (element.tagName === 'form') {\n                netteForms.initForm(element);\n            }\n            const forms = element.querySelectorAll('form');\n            for (let i = 0; i < forms.length; i++) {\n                netteForms.initForm(forms.item(i));\n            }\n        }\n    }\n    processForm(event) {\n        const { element, originalEvent } = event.detail;\n        const inputElement = element;\n        if (inputElement.form !== undefined && inputElement.form !== null) {\n            inputElement.form['nette-submittedBy'] = element;\n        }\n        const netteForms = this.netteForms || window.Nette;\n        if ((element.tagName === 'FORM' || element.form) && netteForms && !netteForms.validateForm(element)) {\n            if (originalEvent) {\n                originalEvent.stopImmediatePropagation();\n                originalEvent.preventDefault();\n            }\n            event.preventDefault();\n        }\n    }\n}\n\nclass RedirectHandler extends EventTarget {\n    constructor(naja) {\n        super();\n        this.naja = naja;\n        naja.uiHandler.addEventListener('interaction', (event) => {\n            var _a, _b, _c;\n            const { element, options } = event.detail;\n            if (!element) {\n                return;\n            }\n            if (element.hasAttribute('data-naja-force-redirect') || ((_a = element.form) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-naja-force-redirect'))) {\n                const value = (_b = element.getAttribute('data-naja-force-redirect')) !== null && _b !== void 0 ? _b : (_c = element.form) === null || _c === void 0 ? void 0 : _c.getAttribute('data-naja-force-redirect');\n                options.forceRedirect = value !== 'off';\n            }\n        });\n        naja.addEventListener('success', (event) => {\n            var _a;\n            const { payload, options } = event.detail;\n            if (payload.redirect) {\n                this.makeRedirect(payload.redirect, (_a = options.forceRedirect) !== null && _a !== void 0 ? _a : false, options);\n                event.stopImmediatePropagation();\n            }\n        });\n        this.locationAdapter = {\n            assign: (url) => window.location.assign(url),\n        };\n    }\n    makeRedirect(url, force, options = {}) {\n        if (url instanceof URL) {\n            url = url.href;\n        }\n        let isHardRedirect = force || !this.naja.uiHandler.isUrlAllowed(url);\n        const canRedirect = this.dispatchEvent(new CustomEvent('redirect', {\n            cancelable: true,\n            detail: {\n                url,\n                isHardRedirect,\n                setHardRedirect(value) {\n                    isHardRedirect = !!value;\n                },\n                options,\n            },\n        }));\n        if (!canRedirect) {\n            return;\n        }\n        if (isHardRedirect) {\n            this.locationAdapter.assign(url);\n        }\n        else {\n            this.naja.makeRequest('GET', url, null, options);\n        }\n    }\n}\n\nclass SnippetHandler extends EventTarget {\n    constructor(naja) {\n        super();\n        this.naja = naja;\n        this.op = {\n            replace: (snippet, content) => {\n                snippet.innerHTML = content;\n            },\n            prepend: (snippet, content) => snippet.insertAdjacentHTML('afterbegin', content),\n            append: (snippet, content) => snippet.insertAdjacentHTML('beforeend', content),\n        };\n        naja.addEventListener('success', (event) => {\n            const { options, payload } = event.detail;\n            if (payload.snippets) {\n                this.updateSnippets(payload.snippets, false, options);\n            }\n        });\n    }\n    updateSnippets(snippets, fromCache = false, options = {}) {\n        Object.keys(snippets).forEach((id) => {\n            const snippet = document.getElementById(id);\n            if (snippet) {\n                this.updateSnippet(snippet, snippets[id], fromCache, options);\n            }\n        });\n    }\n    updateSnippet(snippet, content, fromCache, options) {\n        let operation = this.op.replace;\n        if ((snippet.hasAttribute('data-naja-snippet-prepend') || snippet.hasAttribute('data-ajax-prepend')) && !fromCache) {\n            operation = this.op.prepend;\n        }\n        else if ((snippet.hasAttribute('data-naja-snippet-append') || snippet.hasAttribute('data-ajax-append')) && !fromCache) {\n            operation = this.op.append;\n        }\n        const canUpdate = this.dispatchEvent(new CustomEvent('beforeUpdate', {\n            cancelable: true,\n            detail: {\n                snippet,\n                content,\n                fromCache,\n                operation,\n                changeOperation(value) {\n                    operation = value;\n                },\n                options,\n            },\n        }));\n        if (!canUpdate) {\n            return;\n        }\n        if (snippet.tagName.toLowerCase() === 'title') {\n            document.title = content;\n        }\n        else {\n            operation(snippet, content);\n        }\n        this.dispatchEvent(new CustomEvent('afterUpdate', {\n            cancelable: true,\n            detail: {\n                snippet,\n                content,\n                fromCache,\n                operation,\n                options,\n            },\n        }));\n    }\n}\n\nclass HistoryHandler {\n    constructor(naja) {\n        this.naja = naja;\n        this.href = null;\n        this.popStateHandler = this.handlePopState.bind(this);\n        this.uiCache = true;\n        naja.addEventListener('init', this.initialize.bind(this));\n        naja.addEventListener('before', this.saveUrl.bind(this));\n        naja.addEventListener('success', this.pushNewState.bind(this));\n        naja.uiHandler.addEventListener('interaction', this.configureMode.bind(this));\n        this.historyAdapter = {\n            replaceState: (data, title, url) => window.history.replaceState(data, title, url),\n            pushState: (data, title, url) => window.history.pushState(data, title, url),\n        };\n    }\n    initialize(event) {\n        const { defaultOptions } = event.detail;\n        if ('historyUiCache' in defaultOptions && defaultOptions.historyUiCache !== undefined) {\n            this.uiCache = defaultOptions.historyUiCache;\n        }\n        window.addEventListener('popstate', this.popStateHandler);\n        this.historyAdapter.replaceState(this.buildState(window.location.href, this.uiCache), window.document.title, window.location.href);\n    }\n    handlePopState(e) {\n        if (!e.state) {\n            return;\n        }\n        if (e.state.ui) {\n            this.handleSnippets(e.state.ui);\n            this.handleTitle(e.state.title);\n        }\n        else if (e.state.ui === false) {\n            this.naja.makeRequest('GET', e.state.href, null, {\n                history: false,\n                historyUiCache: false,\n            });\n        }\n    }\n    saveUrl(event) {\n        const { url } = event.detail;\n        this.href = url;\n    }\n    configureMode(event) {\n        var _a, _b, _c, _d, _e, _f;\n        const { element, options } = event.detail;\n        // propagate mode to options\n        if (!element) {\n            return;\n        }\n        if (element.hasAttribute('data-naja-history') || ((_a = element.form) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-naja-history'))) {\n            const value = (_b = element.getAttribute('data-naja-history')) !== null && _b !== void 0 ? _b : (_c = element.form) === null || _c === void 0 ? void 0 : _c.getAttribute('data-naja-history');\n            options.history = HistoryHandler.normalizeMode(value);\n        }\n        if (element.hasAttribute('data-naja-history-cache') || ((_d = element.form) === null || _d === void 0 ? void 0 : _d.hasAttribute('data-naja-history-nocache'))) {\n            const value = (_e = element.getAttribute('data-naja-history-cache')) !== null && _e !== void 0 ? _e : (_f = element.form) === null || _f === void 0 ? void 0 : _f.getAttribute('data-naja-history-cache');\n            options.historyUiCache = value !== 'off';\n        }\n    }\n    static normalizeMode(mode) {\n        if (mode === 'off' || mode === false) {\n            return false;\n        }\n        else if (mode === 'replace') {\n            return 'replace';\n        }\n        return true;\n    }\n    pushNewState(event) {\n        const { payload, options } = event.detail;\n        const mode = HistoryHandler.normalizeMode(options.history);\n        if (mode === false) {\n            return;\n        }\n        if (payload.postGet && payload.url) {\n            this.href = payload.url;\n        }\n        const method = mode === 'replace' ? 'replaceState' : 'pushState';\n        const uiCache = options.historyUiCache === true || (options.historyUiCache !== false && this.uiCache); // eslint-disable-line no-extra-parens\n        this.historyAdapter[method](this.buildState(this.href, uiCache), window.document.title, this.href);\n        this.href = null;\n    }\n    buildState(href, uiCache) {\n        const state = {\n            href,\n        };\n        if (uiCache) {\n            state.title = window.document.title;\n            state.ui = this.findSnippets();\n        }\n        else {\n            state.ui = false;\n        }\n        return state;\n    }\n    findSnippets() {\n        const result = {};\n        const snippets = window.document.querySelectorAll('[id^=\"snippet-\"]');\n        for (let i = 0; i < snippets.length; i++) {\n            const snippet = snippets.item(i);\n            if (!snippet.hasAttribute('data-naja-history-nocache') && !snippet.hasAttribute('data-history-nocache')) {\n                result[snippet.id] = snippet.innerHTML;\n            }\n        }\n        return result;\n    }\n    handleSnippets(snippets) {\n        this.naja.snippetHandler.updateSnippets(snippets, true);\n        this.naja.scriptLoader.loadScripts(snippets);\n    }\n    handleTitle(title) {\n        window.document.title = title;\n    }\n}\n\nclass ScriptLoader {\n    constructor(naja) {\n        naja.addEventListener('success', (event) => {\n            const { payload } = event.detail;\n            if (payload.snippets) {\n                this.loadScripts(payload.snippets);\n            }\n        });\n    }\n    loadScripts(snippets) {\n        Object.keys(snippets).forEach((id) => {\n            const content = snippets[id];\n            if (!/<script/i.test(content)) {\n                return;\n            }\n            const el = window.document.createElement('div');\n            el.innerHTML = content;\n            const scripts = el.querySelectorAll('script');\n            for (let i = 0; i < scripts.length; i++) {\n                const script = scripts.item(i);\n                const scriptEl = window.document.createElement('script');\n                scriptEl.innerHTML = script.innerHTML;\n                if (script.hasAttributes()) {\n                    const attrs = script.attributes;\n                    for (let j = 0; j < attrs.length; j++) {\n                        const attrName = attrs[j].name;\n                        scriptEl.setAttribute(attrName, attrs[j].value);\n                    }\n                }\n                window.document.head.appendChild(scriptEl)\n                    .parentNode.removeChild(scriptEl);\n            }\n        });\n    }\n}\n\nclass Naja extends EventTarget {\n    constructor(uiHandler, redirectHandler, snippetHandler, formsHandler, historyHandler, scriptLoader) {\n        super();\n        this.VERSION = 2;\n        this.initialized = false;\n        this.extensions = [];\n        this.defaultOptions = {};\n        this.uiHandler = uiHandler ? new uiHandler(this) : new UIHandler(this);\n        this.redirectHandler = redirectHandler ? new redirectHandler(this) : new RedirectHandler(this);\n        this.snippetHandler = snippetHandler ? new snippetHandler(this) : new SnippetHandler(this);\n        this.formsHandler = formsHandler ? new formsHandler(this) : new FormsHandler(this);\n        this.historyHandler = historyHandler ? new historyHandler(this) : new HistoryHandler(this);\n        this.scriptLoader = scriptLoader ? new scriptLoader(this) : new ScriptLoader(this);\n    }\n    registerExtension(extension) {\n        if (this.initialized) {\n            extension.initialize(this);\n        }\n        this.extensions.push(extension);\n    }\n    initialize(defaultOptions = {}) {\n        if (this.initialized) {\n            throw new Error('Cannot initialize Naja, it is already initialized.');\n        }\n        this.defaultOptions = defaultOptions;\n        this.extensions.forEach((extension) => extension.initialize(this));\n        this.dispatchEvent(new CustomEvent('init', { detail: { defaultOptions } }));\n        this.initialized = true;\n    }\n    async makeRequest(method, url, data = null, options = {}) {\n        // normalize url to instanceof URL\n        if (typeof url === 'string') {\n            url = new URL(url, location.href);\n        }\n        options = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), { fetch: Object.assign(Object.assign({}, this.defaultOptions.fetch || {}), options.fetch || {}) });\n        const headers = new Headers(options.fetch.headers || {});\n        const body = this.transformData(url, method, data);\n        const abortController = new AbortController();\n        const request = new Request(url.toString(), Object.assign(Object.assign({ credentials: 'same-origin' }, options.fetch), { method,\n            headers,\n            body, signal: abortController.signal }));\n        // impersonate XHR so that Nette can detect isAjax()\n        request.headers.set('X-Requested-With', 'XMLHttpRequest');\n        if (!this.dispatchEvent(new CustomEvent('before', { cancelable: true, detail: { request, method, url: url.toString(), data, options } }))) {\n            return {};\n        }\n        const promise = window.fetch(request);\n        this.dispatchEvent(new CustomEvent('start', { detail: { request, promise, abortController, options } }));\n        let response, payload;\n        try {\n            response = await promise;\n            if (!response.ok) {\n                throw new HttpError(response);\n            }\n            payload = await response.json();\n        }\n        catch (error) {\n            if (error.name === 'AbortError') {\n                this.dispatchEvent(new CustomEvent('abort', { detail: { request, error, options } }));\n                this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload: undefined, error, options } }));\n                return {};\n            }\n            this.dispatchEvent(new CustomEvent('error', { detail: { request, response, error, options } }));\n            this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload: undefined, error, options } }));\n            throw error;\n        }\n        this.dispatchEvent(new CustomEvent('success', { detail: { request, response, payload, options } }));\n        this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload, error: undefined, options } }));\n        return payload;\n    }\n    appendToQueryString(searchParams, key, value) {\n        if (value === null || value === undefined) {\n            return;\n        }\n        if (Array.isArray(value)) {\n            let index = 0;\n            for (const subvalue of value) {\n                this.appendToQueryString(searchParams, `${key}[${index++}]`, subvalue);\n            }\n        }\n        else if (Object.getPrototypeOf(value) === Object.prototype) {\n            for (const [subkey, subvalue] of Object.entries(value)) {\n                this.appendToQueryString(searchParams, `${key}[${subkey}]`, subvalue);\n            }\n        }\n        else {\n            searchParams.append(key, String(value));\n        }\n    }\n    transformData(url, method, data) {\n        const isGet = ['GET', 'HEAD'].includes(method.toUpperCase());\n        // sending a form via GET -> serialize FormData into URL and return empty request body\n        if (isGet && data instanceof FormData) {\n            for (const [key, value] of data) {\n                if (value !== null && value !== undefined) {\n                    url.searchParams.append(key, String(value));\n                }\n            }\n            return null;\n        }\n        // sending a POJO -> serialize it recursively into URLSearchParams\n        const isDataPojo = data !== null && Object.getPrototypeOf(data) === Object.prototype;\n        if (isDataPojo) {\n            // for GET requests, append values to URL and return empty request body\n            // otherwise build `new URLSearchParams()` to act as the request body\n            const transformedData = isGet ? url.searchParams : new URLSearchParams();\n            for (const [key, value] of Object.entries(data)) {\n                this.appendToQueryString(transformedData, key, value);\n            }\n            return isGet\n                ? null\n                : transformedData;\n        }\n        return data;\n    }\n}\nclass HttpError extends Error {\n    constructor(response) {\n        const message = `HTTP ${response.status}: ${response.statusText}`;\n        super(message);\n        this.name = this.constructor.name;\n        this.stack = new Error(message).stack;\n        this.response = response;\n    }\n}\n\nclass AbortExtension {\n    constructor() {\n        this.abortable = true;\n        this.abortController = null;\n    }\n    initialize(naja) {\n        naja.uiHandler.addEventListener('interaction', this.checkAbortable.bind(this));\n        naja.addEventListener('init', this.onInitialize.bind(this));\n        naja.addEventListener('before', this.checkAbortable.bind(this));\n        naja.addEventListener('start', this.saveAbortController.bind(this));\n        naja.addEventListener('complete', this.clearAbortController.bind(this));\n    }\n    onInitialize() {\n        document.addEventListener('keydown', (event) => {\n            if (this.abortController !== null\n                && event.key === 'Escape'\n                && !(event.ctrlKey || event.shiftKey || event.altKey || event.metaKey)\n                && this.abortable) {\n                this.abortController.abort();\n                this.abortController = null;\n            }\n        });\n    }\n    checkAbortable(event) {\n        var _a, _b;\n        const { options } = event.detail;\n        this.abortable = 'element' in event.detail\n            ? ((_a = event.detail.element.getAttribute('data-naja-abort')) !== null && _a !== void 0 ? _a : (_b = event.detail.element.form) === null || _b === void 0 ? void 0 : _b.getAttribute('data-naja-abort')) !== 'off' // eslint-disable-line no-extra-parens\n            : options.abort !== false;\n        // propagate to options if called in interaction event\n        options.abort = this.abortable;\n    }\n    saveAbortController(event) {\n        const { abortController } = event.detail;\n        this.abortController = abortController;\n    }\n    clearAbortController() {\n        this.abortController = null;\n        this.abortable = true;\n    }\n}\n\nclass UniqueExtension {\n    constructor() {\n        this.abortControllers = new Map();\n    }\n    initialize(naja) {\n        naja.uiHandler.addEventListener('interaction', this.checkUniqueness.bind(this));\n        naja.addEventListener('start', this.abortPreviousRequest.bind(this));\n        naja.addEventListener('complete', this.clearRequest.bind(this));\n    }\n    checkUniqueness(event) {\n        var _a, _b;\n        const { element, options } = event.detail;\n        const unique = (_a = element.getAttribute('data-naja-unique')) !== null && _a !== void 0 ? _a : (_b = element.form) === null || _b === void 0 ? void 0 : _b.getAttribute('data-naja-unique');\n        options.unique = unique === 'off' ? false : unique !== null && unique !== void 0 ? unique : 'default';\n    }\n    abortPreviousRequest(event) {\n        var _a, _b, _c;\n        const { abortController, options } = event.detail;\n        if (options.unique !== false) {\n            (_b = this.abortControllers.get((_a = options.unique) !== null && _a !== void 0 ? _a : 'default')) === null || _b === void 0 ? void 0 : _b.abort();\n            this.abortControllers.set((_c = options.unique) !== null && _c !== void 0 ? _c : 'default', abortController);\n        }\n    }\n    clearRequest(event) {\n        var _a;\n        const { request, options } = event.detail;\n        if (!request.signal.aborted && options.unique !== false) {\n            this.abortControllers.delete((_a = options.unique) !== null && _a !== void 0 ? _a : 'default');\n        }\n    }\n}\n\nconst naja = new Naja();\nnaja.registerExtension(new AbortExtension());\nnaja.registerExtension(new UniqueExtension());\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (naja);\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/naja/dist/Naja.esm.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcz83NjZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/OTg1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ })

/******/ });
//# sourceMappingURL=dev.bundle.main.js.map